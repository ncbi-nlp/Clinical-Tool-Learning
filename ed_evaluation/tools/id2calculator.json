{
    "1": "## Computation\n```python\ndef compute_perc_rule(age, pulse, oxygen_saturation, unilateral_leg_swelling, hemoptysis, recent_trauma_or_surgery, prior_pe_or_dvt, hormone_use):\n    \"\"\"\n    Compute the Pulmonary Embolism Rule-out Criteria (PERC).\n\n    Parameters:\n    age (float): patient age in years.\n    pulse (float): patient pulse rate in beats per minute.\n    oxygen_saturation (float): patient SaO(2) in percentage (0-100).\n    unilateral_leg_swelling (bool): whether the patient has unilateral leg swelling.\n    hemoptysis (bool): whether the patient has hemoptysis.\n    recent_trauma_or_surgery (bool): whether the patient has recent trauma or surgery in the previous 4 weeks. \n    prior_pe_or_dvt (bool): whether the patient has prior PE or DVT.\n    hormone_use (bool): whether the patient is using hormone (includes oral contraceptives and hormone replacement or estrogenic hormones use in males or female patients)\n\n    Returns:\n    bool: whether PE can be ruled out.\n    \"\"\"\n    if age >= 50:\n        return False\n    if pulse >= 100:\n        return False\n    if oxygen_saturation <= 94:\n        return False\n    if unilateral_leg_swelling:\n        return False\n    if hemoptysis:\n        return False\n    if recent_trauma_or_surgery:\n        return False\n    if prior_pe_or_dvt:\n        return False\n    if hormone_use:\n        return False\n\n    return True\n```\n\n## Interpretation\n- True: PE might be ruled out. The chance of having PE is less than 2%.\n- False: PE cannot be ruled out.\n",
    "2": "## Computation\n```python\n\ndef check_ankle_xray_needed(pain_location, bone_tenderness_tibia, bone_tenderness_fibula, inability_to_bear_weight):\n    \"\"\"\n    Check if plain X-rays of the ankle are needed based on specified criteria.\n\n    Parameters:\n    pain_location (str): location of pain ('malleolar' or 'midfoot').\n    bone_tenderness_tibia (bool): whether there is bone tenderness along the distal 6 cm of the posterior edge of the tibia or tip of the lateral malleolus.\n    bone_tenderness_fibula (bool): whether there is bone tenderness along the distal 6 cm of the posterior edge of the fibula or tip of the lateral malleolus.\n    inability_to_bear_weight (bool): whether there is inability to bear weight both immediately and in the emergency department for four steps.\n\n    Returns:\n    bool: whether plain X-rays of the ankle are needed.\n    \"\"\"\n    if pain_location == 'malleolar' and (bone_tenderness_tibia or bone_tenderness_fibula or inability_to_bear_weight):\n        return True\n    else:\n        return False\n\ndef check_foot_xray_needed(pain_location, bone_tenderness_fifth_metatarsal, bone_tenderness_navicular, inability_to_bear_weight):\n    \"\"\"\n    Check if plain X-rays of the foot are needed based on specified criteria.\n\n    Parameters:\n    pain_location (str): location of pain ('malleolar' or 'midfoot').\n    bone_tenderness_fifth_metatarsal (bool): whether there is bone tenderness at the base of the fifth metatarsal.\n    bone_tenderness_navicular (bool): whether there is bone tenderness at the navicular bone.\n    inability_to_bear_weight (bool): whether there is inability to bear weight both immediately and in the emergency department for four steps.\n\n    Returns:\n    bool: whether plain X-rays of the foot are needed.\n    \"\"\"\n    if pain_location == 'midfoot' and (bone_tenderness_fifth_metatarsal or bone_tenderness_navicular or inability_to_bear_weight):\n        return True\n    else:\n        return False\n```\n\n## Interpretation\n- For midfoot fracture diagnosis: \n    - True - Patient is likely to have midfoot fracture with injury, clinicians should use radiography\n    - False - Patient is unlikely to have midfoot fracture with injury, clinicians do not need to use radiography\n- For malleolar fracture diagnosis:\n    - True - Patient might have malleolar fracture with injury, clinicians should use radiography to diagnose further\n    - False - Patient is unlikely to have malleolar fracture with injury, clinicians do not need to use radiography\n",
    "3": "## Computation\n```python\ndef canadian_cspine_rule(age, gcs_score, trauma_mechanism, paraesthesia_extremities, rear_end_collision, sitting_position, ambulatory, delayed_neck_pain, no_midline_tenderness, neck_rotation):\n    \"\"\"\n    Apply the Canadian C-spine Rule (CCR) to determine the need for radiography.\n\n    Parameters:\n    age (int): patient age in years.\n    gcs_score (int): Glasgow Coma Scale (GCS) score.\n    trauma_mechanism (bool): whether one of the high-risk trauma mechanisms is present.\n    paraesthesia_extremities (bool): whether there is paraesthesia in extremities.\n    rear_end_collision (bool): whether there is a simple rear-end motor vehicle collision.\n    sitting_position (bool): whether the patient was in a sitting position in the emergency department.\n    ambulatory (bool): whether the patient was ambulatory at any time.\n    delayed_neck_pain (bool): whether there was delayed onset of neck pain.\n    no_midline_tenderness (bool): whether there is absence of midline C-spine tenderness.\n    neck_rotation (bool): whether the patient can actively rotate their neck 45 degrees to either side.\n\n    Returns:\n    bool: whether radiography is needed.\n    \"\"\"\n    if gcs_score == 15:\n        if age >= 65 or trauma_mechanism or paraesthesia_extremities:\n            return True\n        elif rear_end_collision or sitting_position or ambulatory or delayed_neck_pain or no_midline_tenderness:\n            if neck_rotation:\n                return False\n            else:\n                return True\n    else:\n        return False\n\n```\n\n## Interpretation\n- True: Risk of C-Spine, radiography imaging is required\n- False: No risk of C-Spine, no radiography imaging is required\n",
    "4": "## Computation\n```python\n\ndef compute_fracture_rule(age, tenderness_at_fibula_head, isolated_patella_tenderness, inability_to_flex_90_degrees, inability_to_bear_weight):\n    \"\"\"\n    Compute the rule for identifying knee fractures.\n\n    Parameters:\n    age (int): patient's age in years.\n    tenderness_at_fibula_head (bool): whether the patient has tenderness at the head of the fibula.\n    isolated_patella_tenderness (bool): whether the patient has isolated tenderness of the patella.\n    inability_to_flex_90_degrees (bool): whether the patient is unable to flex to 90 degrees.\n    inability_to_bear_weight (bool): whether the patient is unable to bear weight both immediately and in the emergency department.\n\n    Returns:\n    bool: whether a knee fracture can be identified.\n    \"\"\"\n    return age >= 55 or tenderness_at_fibula_head or isolated_patella_tenderness or inability_to_flex_90_degrees or inability_to_bear_weight\n\n```\n\n## Interpretation\n- True: Risk of knee fracture, use radiology for further diagnosis \n- False: Unlikely of knee fracture, no need for radiology for further diagnosis \n",
    "5": "## Computation\n```python\ndef calculate_dvt_wells_score(active_cancer, calf_swelling, unilateral_superficial_veins, unilateral_pitting_edema, previous_dvt, entire_leg_swelling, local_tenderness, recent_immobilization_or_surgery, alternative_diagnosis):\n    \"\"\"\n    Evaluate the Wells Score to assess the pretest probability of deep vein thrombosis (DVT).\n\n    Parameters:\n    active_cancer (bool): whether the patient has active cancer.\n    calf_swelling (bool): whether calf swelling > 3 cm compared to the asymptomatic leg is present.\n    unilateral_superficial_veins (bool): whether unilateral superficial veins are present.\n    unilateral_pitting_edema (bool): whether unilateral pitting edema is present.\n    previous_dvt (bool): whether the patient has a previous DVT.\n    entire_leg_swelling (bool): whether entire leg swelling is present.\n    local_tenderness (bool): whether local tenderness along the distribution of the deep venous system is present.\n    recent_immobilization_or_surgery (bool): whether recent cast immobilization or paresis, or bedridden > 3 days or major surgery in the past 12 weeks are present.\n    alternative_diagnosis (bool): whether an alternative diagnosis is at least as likely as DVT.\n\n    Returns:\n    int: the total Wells Score.\n    \"\"\"\n    total_score = 0\n    if active_cancer:\n        total_score += 1\n    if calf_swelling:\n        total_score += 1\n    if unilateral_superficial_veins:\n        total_score += 1\n    if unilateral_pitting_edema:\n        total_score += 1\n    if previous_dvt:\n        total_score += 1\n    if entire_leg_swelling:\n        total_score += 1\n    if local_tenderness:\n        total_score += 1\n    if recent_immobilization_or_surgery:\n        total_score += 1\n    if alternative_diagnosis:\n        total_score -= 2\n\n    return total_score\n```\n\n## Interpretation\n- total_points < 1: Low pretest probability of having DVT\n- 1 <= total_points <= 2: Moderate pretest probability of having DVT\n- total_points >= 3: High pretest probability of having DVT\n\n\n\n",
    "6": "## Computation\n```python\ndef calculate_pe_diagnosis_score(dvt_symptoms, alternative_diagnosis_likelihood, heart_rate, immobilization_or_surgery, previous_dvt_or_pe, hemoptysis, malignancy_with_treatment):\n    \"\"\"\n    Compute the Wells' Score for assessing the likelihood of pulmonary embolism (PE).\n\n    Parameters:\n    dvt_symptoms (bool): whether there are clinical signs and symptoms of deep vein thrombosis (True/False).\n    alternative_diagnosis_likelihood (bool): whether an alternative diagnosis is less likely than PE (True/False).\n    heart_rate (float): patient heart rate in beats per minute.\n    immobilization_or_surgery (bool): whether there is immobilization for more than 3 days or surgery in the previous 4 weeks (True/False).\n    previous_dvt_or_pe (bool): whether there is a history of previous DVT or PE (True/False).\n    hemoptysis (bool): whether there is hemoptysis (True/False).\n    malignancy_with_treatment (bool): whether there is malignancy with current treatment, treatment in the last 6 months, or palliative care (True/False).\n\n    Returns:\n    float: computed Wells' Score.\n    \"\"\"\n    wells_score = 0\n\n    # Adding scores based on Wells' Score criteria\n    if dvt_symptoms:\n        wells_score += 3\n    if alternative_diagnosis_likelihood:\n        wells_score += 3\n    if heart_rate > 100:\n        wells_score += 1.5\n    if immobilization_or_surgery:\n        wells_score += 1.5\n    if previous_dvt_or_pe:\n        wells_score += 1.5\n    if hemoptysis:\n        wells_score += 1\n    if malignancy_with_treatment:\n        wells_score += 1\n\n    return wells_score\n\n```\n\n## Interpretation\nTwo Possible Interpretations:\n\nInterpretation #1: \n\n- 0 <= wells_score < 4: Probability of having Pulmonary Embolism is low\n- wells_score >= 4: Probability of having Pulmonary Embolism is high\n\nInterpretation #2:\n- wells_score < 2: Low risk of having Pulmonary Embolism\n- 2 <= wells_score <= 6: Intermediate risk of having Pulmonary Embolism\n- wells_score > 6: High risk of having Pulmonary Embolism\n",
    "7": "## Computation\n```python\n\ndef compute_center_score(temperature, cough, tonsillar_swelling, anterior_cervical_adenopathy, age):\n    \"\"\"\n    Calculate the score for diagnosing Group A Streptococcal (GAS) infection.\n\n    Parameters:\n    temperature (float): Patient's temperature in Celsius.\n    cough (bool): Whether the patient has cough.\n    tonsillar_swelling (bool): Whether the patient has tonsillar swelling.\n    anterior_cervical_adenopathy (bool): Whether the patient has tender anterior cervical adenopathy.\n    age (int): Patient's age.\n\n    Returns:\n    int: The GAS infection score.\n    \"\"\"\n    score = 0\n\n    if temperature > 38:\n        score += 1\n    if not cough:\n        score += 1\n    if tonsillar_swelling:\n        score += 1\n    if anterior_cervical_adenopathy:\n        score += 1\n\n    if 3 <= age <= 14:\n        score = 1\n    elif age >= 45:\n        score = -1\n\n    return max(0, score)\n```\n\n## Interpretation\n- Patients with a score of 0, GAS infection is unlikely (2.5%) - no need for throat swab or antibiotic therapy\n- Patients with a score of 1, GAS infection is unlikely (5.1%) - no need for throat swab or anitbiotic therapy\n- Patients with a score of 2, GAS is possible (11.2%) - take a throat swab test, before deciding on antibiotic therapy \n- Patients with a score of 3, GAS is possible (27.8%) - take a throat swab test, before deciding on antibiotic therapy\n- Patients with a score of 4, GAS is likely - (52.8%) - therapy with penicillin can be started immediately\n\n",
    "8": "## Computation\n```python\n\n\ndef is_low_risk_under_2(age, glasgow_score, normal_mental_status, scalp_hematoma, loss_of_consciousness, injury_mechanism, skull_fracture, acting_normally, vomiting, signs_of_skull_fracture, severe_headache):\n    \"\"\"\n    Evaluate whether a child is in the low-risk group for traumatic brain injury (TBI).\n\n    Parameters:\n    age (int): age of the child\n    glasgow_score (int): The glasgow score of the patient\n    normal_mental_status (bool): Whether the child has normal mental status.\n    scalp_hematoma (bool): Whether the child has scalp hematoma except frontal.\n    loss_of_consciousness (bool): Whether the child experienced loss of consciousness or for less then 5 s\n    injury_mechanism (bool): Whether the injury mechanism is non-severe. A severe injury mechanism would include \\\n    the following criteria: motor vehicle crash with patient ejection, death of another passenger, or rollover, \n    pedestrian or bicyclist without helmet struck by a motorized vehicle, fall of more than 1.5 m (5 feet) for patients aged 2 years and older, or more than 0.9 m (3 feet) for those younger than 2 years, head struck by a high-impact object. \n    skull_fracture (bool): Whether the child has a palpable skull fracture.\n    acting_normally (bool): Whether the child is acting normally according to the parents.\n    vomiting (bool): Whether the child had vomiting.\n    signs_of_skull_fracture (bool): Whether the child has signs of basilar skull fracture.\n    severe_headache (bool): Whether the child has severe headache.\n\n    Returns:\n    bool: Whether the child is in the low-risk group for TBI.\n    \"\"\"\n\n    gcs = glasgow_score\n    \n    if age < 2:\n        if gcs > 14:\n            if normal_mental_status and not scalp_hematoma and (not loss_of_consciousness) \\\n                    and injury_mechanism and not skull_fracture and acting_normally:\n                return True\n            else:\n                return False\n        return False\n\n    else:\n        if gcs > 14:\n            if normal_mental_status and not loss_of_consciousness and not vomiting and injury_mechanism \\\n                    and not signs_of_skull_fracture and not severe_headache:\n                return True\n            else:\n                return False\n        return False\n\n```\n\n## Interpretation\n- True - Low risk for ciTBI, no need for CT scan\n- False - High risk for ciTBI, should conduct CT scan\n\n\n\n",
    "9": "## Computation\n```python\ndef calculate_mortality_score_curb65(confusion, urea, respiratory_rate, systolic_pressure, diastolic_pressure, age):\n    \"\"\"\n    Calculate mortality score based on clinical criteria.\n\n    Parameters:\n    confusion (bool): Whether confusion is present.\n    urea (float): Urea level in mmol/l.\n    respiratory_rate (float): Respiratory rate in breaths per minute.\n    systolic_pressure (float): Systolic blood pressure (mm Hg).\n    diastolic_pressure (float): Diastolic blood pressure (mm Hg)\n    age (int): Patient's age in years.\n\n    Returns:\n    int: Mortality score.\n    \"\"\"\n    score = 0\n    \n    if confusion:\n        score += 1\n    if urea > 7:\n        score += 1\n    if respiratory_rate >= 30:\n        score += 1\n    if systolic_pressure < 90 or diastolic_pressure <= 60:\n        score += 1\n    if age >= 65:\n        score += 1\n    \n    return score\n\n```\n\n## Interpretation\n- score = 0: 0.7% risk of mortality\n- score = 1: 3.2% risk of mortality\n- score = 2: 3% risk of mortality\n- score = 3: 17% risk of mortality\n- score = 4: 41.5% risk of mortality\n- score = 5: 57% risk of mortality \n",
    "10": "## Computation\n```python\ndef compute_heart_score(history, ecg_abnormality, age, risk_factors, troponin_level):\n    \"\"\"\n    Compute heart score based on specified predictors.\n\n    Parameters:\n    history (str): Patient history classification ('nonspecific', 'moderately suspicious', 'highly suspicious').\n    ecg_abnormality (str): ECG classification ('normal', 'abnormal without significant ST-segment depression', 'bundle branch block', 'significant ST-segment depression or elevation').\n    age (int): Age (years) of the patient.\n    risk_factors (int): Number of risk factors for coronary artery disease (currently treated diabetes mellitus, current or recent (< one month) smoker, diagnosed hypertension, diagnosed hypercholesterolaemia, family history of coronary artery disease and obesity). If the patient had no risk factors at all, zero points were given. For one or two risk factors, one point was given. For three or more risk factors, two points were given. Two points were also given for a history of coronary revascularisation, myocardial infarction, stroke or peripheral arterial disease.\n    troponin_level (str): 'below the normal institutional upper reference range', 'between the normal and twice institutional upper reference range', 'more than twice the normal institutional upper reference range'). Based on this study, the institutional upper reference range is 0.04 nanograms per milliliter. \n    \n    Returns:\n    int: Predicted score for primary endpoints.\n    \"\"\"\n    # Score for patient history\n    if history == 'nonspecific':\n        history_score = 0\n    elif history == 'moderately suspicious':\n        history_score = 1\n    else:  # highly suspicious\n        history_score = 2\n\n    # Score for ECG abnormalities\n    if ecg_abnormality == 'normal':\n        ecg_score = 0\n    elif ecg_abnormality == 'abnormal without significant ST-segment depression' or ecg_abnormality == 'bundle branch block' or ecg_abnormality == 'typical abnormalities indicative of left ventricular hypertrophy' or ecg_abnormality == 'repolarisation abnormalities probably due to the use of digoxin' or ecg_abnormality == 'unchanged known repolarisation disturbances':\n        ecg_score = 1\n    elif ecg_abnormality == 'significant ST-segment depression or elevation':\n        ecg_score = 2\n\n    # Score for age\n    if age < 45:\n        age_score = 0\n    elif 45 <= age < 65:\n        age_score = 1\n    else:\n        age_score = 2\n\n    # Score for risk factors\n    if risk_factors == 0:\n        risk_factor_score = 0\n    elif risk_factors == 1 or risk_factors == 2:\n        risk_factor_score = 1\n    else:\n        risk_factor_score = 2\n\n    # Score for troponin level\n    if troponin_level == 'below the normal institutional upper reference range':\n        troponin_score = 0\n    elif troponin_level == 'between the normal and twice institutional upper reference range':\n        troponin_score = 1\n    elif troponin_level == 'more than twice the normal institutional upper reference range':\n        troponin_score = 2\n\n    # Calculate total score\n    total_score = history_score + ecg_score + age_score + risk_factor_score + troponin_score\n    return total_score\n\n```\n\n## Interpretation\n- 0 <= total_score <= 3: Low risk (2.5%) of an endpoint, an early discharge is acceptable\n- 4 <= total_score <= 6: Intermediate risk (20.3%) of an endpoint, should be clinically admitted but with non-invasive testing\n- total_score >= 7: High risk (72.7%) of an endpoint, should apply invasive strategies without any preceding non-invasive testing\n",
    "11": "## Computation\n```python\n\ndef calculate_chads2_index(had_congestive_heart_failure, had_hypertension, age, has_diabetes, had_stroke_or_tia):\n    \"\"\"\n    Calculate the CHADS\u2082 index for assessing stroke risk in atrial fibrillation (AF) patients.\n\n    Parameters:\n    had_congestive_heart_failure (bool): whether patient is having or has had congestive heart failure\n    had_hypertension (bool): whether patient is having or has had hypertension\n    age (int): Age of the patient.\n    has_diabetes (bool): whether patient is having or has had diabetes mellitus\n    had_stroke_or_tia (bool): whether patient has had a history of stroke or transient ischemic attack (TIA)\n\n    Returns:\n    int: The calculated CHADS\u2082 index score.\n    \"\"\"\n    score = 0\n    if had_congestive_heart_failure:\n        score += 1\n    if had_hypertension:\n        score += 1\n    if age >= 75:\n        score += 1\n    if has_diabetes:\n        score += 1\n    if had_stroke_or_tia:\n        score += 2\n    return score\n\n```\n\n## Interpretation\n\n- score = 0: 1.9% stroke rate per 100 patient-years without antithrombotic therapy\n- score = 1: 2.8% stroke rate per 100 patient-years without antithrombotic therapy\n- score = 2: 4.0% stroke rate per 100 patient-years without antithrombotic therapy\n- score = 3: 5.9% stroke rate per 100 patient-years without antithrombotic therapy\n- score = 4: 8.5% stroke rate per 100 patient-years without antithrombotic therapy\n- score = 5: 12.5% stroke rate per 100 patient-years without antithrombotic therapy\n- score = 6: 18.2% stroke rate per 100 patient-years without antithrombotic therapy\n",
    "12": "## Computation\n```python\ndef compute_gcs(eye_score, verbal_score, motor_score):\n    \"\"\"\n    Compute the Glasgow Coma Scale (GCS) based on its three components: eyes, verbal response, and motor response.\n\n    Parameters:\n    eye_score (int): score for eye response (4 - opens spontaneously, 3 - to verbal command, 2 - to pain, 1 - none). \n    verbal_score (int): score for verbal response (5 - oriented, 4 - disoriented, 3 - inappropriate words, 2 - incomprehensible sounds, 1 - none). \n    motor_score (int): score for motor response (6 - obeys, 5 - localizes pain, 4 - withdrawal, 3 - abnormal flexion, 2 - abnormal extension, 1 - none). \n\n    Returns:\n    tuple: Tuple containing individual scores for eyes, verbal response, and motor response.\n    \"\"\"\n    return eye_score, verbal_score, motor_score\n```\n\n\n\n",
    "13": "## Computation\n```python\n\ndef compute_ct_head_rule(gcs_score_15_in_2h_fail, age, suspected_open_skull_fracture, sign_of_basal_skull_fracture, vomiting_episodes, amnesia_before_impact, dangerous_mechanism_of_injury):\n    \"\"\"\n    Compute the CT head rule for assessing the need for computed tomography (CT) scan of the head.\n\n    Parameters:\n    gcs_score_15_in_2h_fail (bool): whether the patient failed to reach a gcs = 15 within 2 hours (True/False).\n    age (int): patient age in years.\n    suspected_open_skull_fracture (bool): whether there is suspected open skull fracture (True/False).\n    sign_of_basal_skull_fracture (bool): whether there is any sign of basal skull fracture (True/False).\n    vomiting_episodes (int): number of vomiting episodes.\n    amnesia_before_impact (int): duration of amnesia before impact in minutes.\n    dangerous_mechanism_of_injury (bool): whether there is a dangerous mechanism of injury (True/False).\n\n    Returns:\n    dict: returns whether a CT scan of the head is required based on a high-risk, low-risk factor\n    \"\"\"\n    # High-risk factors\n    high_risk_factors = [\n        gcs_score_15_in_2h_fail, \n        suspected_open_skull_fracture,\n        sign_of_basal_skull_fracture,\n        vomiting_episodes > 2,\n        age > 65\n    ]\n\n    # Medium-risk factors\n    medium_risk_factors = [\n        amnesia_before_impact > 30,  # amnesia before impact > 30 min\n        dangerous_mechanism_of_injury\n    ]\n\n    # Assessing the need for CT scan based on high-risk and medium-risk factors\n    if any(high_risk_factors):\n        return {\"high_risk\": True, \"medium_risk\": False}  # CT scan required based on high-risk factors\n    elif any(medium_risk_factors):\n        return {\"high_risk\": False, \"medium_risk\": True}  # CT scan required based on medium-risk factors\n    else:\n        return {\"high_risk\": False, \"medium_risk\": False}  # No need for CT scan\n\n```\n\n## Interpretation\n- {\"high_risk\": True, \"medium_risk\": False}: Should perform a CT scan for CCHR based on a high-risk factor (100% sensitive for predicting neurological intervention and 32% require a CT scan)\n\n- {\"high_risk\": False, \"medium_risk\": True}: Should perform a CT scan for CCHR based on a medium-risk factor\n(98.4% sensitive for predicting clinically important brain injury and 54% require a CT scan)\n\n- {\"high_risk\": False, \"medium_risk\": False}: Do not have to consider doing a CT scan for CCHR\n\n",
    "14": "## Computation\n```python\ndef compute_qsofa_score(systolic_bp, respiratory_rate, altered_mentation):\n    \"\"\"\n    Compute the quick Sequential [Sepsis-related] Organ Failure Assessment (qSOFA) score.\n\n    Parameters:\n    systolic_bp (int): patient's systolic blood pressure in mm Hg.\n    respiratory_rate (int): patient's respiratory rate in breaths per minute.\n    altered_mentation (bool): whether the patient has altered mentation (True/False).\n\n    Returns:\n    int: qSOFA score.\n    \"\"\"\n    score = 0\n\n    # Systolic hypotension (\u2264100 mm Hg)\n    if systolic_bp <= 100:\n        score += 1\n\n    # Tachypnea (\u226522/min)\n    if respiratory_rate >= 22:\n        score += 1\n\n    # Altered mentation\n    if altered_mentation:\n        score += 1\n\n    return score\n```\n\n## Interpretation\n- 0 <= score <= 1: Far less likely to have fatal outcomes from sepsis\n- score >= 2: At risk from having sepsis, 3-14 times increase in hospital mortality \n",
    "15": "## Computation\n```python\ndef compute_gbs(hemoglobin, BUN, systolic_bp, sex, heart_rate, melena_present, recent_syncope, hepatic_disease_history, cardiac_faliure):\n    '''\n    Compute the Glasgow-Blatchford Bleeding Score (GBS)\n\n    Parameters:\n    hemoglobin (float): hemoglobin concentration in g/dL\n    BUN (float): BUN concentration in  mg/dL\n    sex (str): 'male' or 'female'\n    systolic_bp (float): systolic blood pressure in mm Hg\n    heart_rate (int): beats per second\n    melena_present (bool): Whether the patient has melena (True/False)\n    recent_syncope (bool): Whether the patient has had syncope recently (True/False)\n    hepatic_disease_history (bool): Whether the patient has had a history with hepatic disease (True/False)\n    cardiac_faliure (bool): Whether the patient is currently having symptoms of a cardiac faliure (True/False)\n\n    Returns:\n    int: gbs score.\n    '''\n    score = 0\n\n    if 18.2 <= BUN < 22.4:\n        score += 2\n    elif 22.4 <= BUN < 28:\n        score += 3\n    elif 28 <= BUN <= 70:\n        score += 4\n    elif BUN > 70:\n        score += 6\n\n\n    if sex == 'male':\n        if 12 < hemoglobin < 13:\n            score += 1\n        elif 10 < hemoglobin < 12:\n            score += 3\n        elif hemoglobin < 10:\n            score += 6\n    else:\n        if 10 < hemoglobin < 12:\n            score += 1\n        elif hemoglobin < 10:\n            score += 6\n\n    if 100 <= systolic_bp < 110:\n        score += 1\n    elif 90 <= systolic_bp < 100:\n        score += 2\n    elif systolic_bp < 90:\n        score += 3\n\n    if heart_rate >= 100:\n        score += 1\n    \n    if melena_present:\n        score += 1\n    \n    if recent_syncope:\n        score += 2\n\n    if hepatic_disease_history:\n        score += 2\n\n    if cardiac_faliure:\n        score += 2\n\n    return score\n```\n\n## Interpretation\n- score = 0: Low risk of upper gastrointestinal bleeding\n- score > 0: High risk of upper gastrointestinal bleeding\n\n",
    "16": "## Computation\n```python\n\ndef meets_sirs_criteria(temperature, heart_rate, respiratory_rate, paco2, white_blood_cell_count):\n    \"\"\"\n    Determine if the patient meets the systemic inflammatory response syndrome (SIRS) criteria.\n\n    Parameters:\n    temperature (float): patient's temperature in Celsius.\n    heart_rate (float): patient's heart rate in beats per minute.\n    respiratory_rate (float): patient's respiratory rate in breaths per minute.\n    paco2 (float): partial pressure of arterial carbon dioxide in mm Hg.\n    white_blood_cell_count (int): patient's white blood cell count in cells per cubic millimeter.\n\n    Returns:\n    bool: whether the patient meets the SIRS criteria.\n    \"\"\"\n    sirs_criteria_met = 0\n\n    # Check temperature criteria\n    if temperature > 38 or temperature < 36:\n        sirs_criteria_met += 1\n\n    # Check heart rate criteria\n    if heart_rate > 90:\n        sirs_criteria_met += 1\n\n    # Check respiratory rate criteria\n    if respiratory_rate > 20 or paco2 < 32:\n        sirs_criteria_met += 1\n\n    # Check white blood cell count criteria\n    if white_blood_cell_count > 12000 or white_blood_cell_count < 4000:\n        sirs_criteria_met += 1\n\n    # Check if at least 2 SIRS criteria are met\n    if sirs_criteria_met >= 2:\n        return True\n    else:\n        return False\n\n```\n\n## Interpretation\n- True: Patient meets SIRS criteria\n- False: Patient does not meet SIRS criteria\n\n"
}